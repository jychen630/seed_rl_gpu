todo

1. all settings (bipolar, parallel chains, cartpole)
2. measurement: execution time per agent, throughput (agent/sec), memory usage, gpu usage (for jax and pytorch)
3. execution time per agent is a function of K for each setting 
4. accelerator: pure numpy, jax, pytorch, 
5. fix: how many agent? 1, 10, 100, 1000, 10000

step 1: execution time per agent is a function of K (i.e \#of agent)
step 1: automatically get 2 measurements. (save structured data)
step 2: accelerator: jax (achieve same result)
step 3: accelerator: pytorch (achieve same result)



parallel chain, seed, 10000: 40min


bipolar_seed_sampling_numpy_time_per_agent.png
[env]_[algo]_[accelerator]_[metric].[suffix]
env = {bipolar, parallel}
algo = {seed_sampling, ucrl, thompson, seed_td, seed_lsvi}
accelerator = {numpy, jax, pytorch}
metric = {time_per_agent, throughput, memory_usage, gpu_usage}
suffix = {png, csv}
number_of_agents = {1, 10, 20,30, 40, 50, 60, 70, 80, 90, 100, 1000, //10000}


export JAX_PLATFORM_NAME=cpu


wait, how should we include K???

for time_per_agent, I need a group of subplot 1 * 5
    for env in {bipolar env} :
        for algo in {ucrl, thompson sampling, seed sampling, seed td, seed_lsvi}
            line plots {three lines: numpy, jax, torch} ** {x-axis: all Ks they are run against}
            note that not all algo and framework are run against the same Ks set. make a union of such Ks and left it blank for those that dont have a result


for {cartpole env}:
    a group of bars: {numpy, jax, torch} ** {seed td}
    so total 3 bars only!


    
            we wish to sharply compare numpy + jax + torch tightly in a narrow view
            like: plot{ groupbar{numpy_k_10, jax_k_10, torch_k_10}, groupbar{numpy_k_10, jax_k_10, torch_k_10}, groupbar{numpy_k_100, jax_k_100, torch_k_100}, ... }







paper section

- problem formulation

- Results
- Analysis (main take away bullets)
- Conclusion